#summary Informationen für Entwickler

==1. Wie auf globale Variablen zugreifen?==

Hierzu steht die Klasse qGlobals zur verfügung.

_$globals->post('text'); // $_POST['text'];_

_$globals->get('id'); // $_GET['id'];_

_$globals->session('session_id'); // $_SESSION['session_id'];_

Nur so ist sichergestellt das alle Variablen mit addslashes() bearbeitet werden.

==2. Konfigurationsvariablen==

Das alte System ($config_table) sollte nicht mehr verwendet werden. Dieses steht nur noch aus Gründen der Rückwärtskompatibiltät zur Verfügung-

Besser also die Methode get() der Klasse qConfig benutzen:

$config->get('foo'); // früher: $config_table['foo'];

Somit ist sichergestellt, dass die Variablen nicht manipuliert werden können.

Hier noch weiter wichtige Methoden der qConfig Klasse:

_// Konfiguration zur Laufzeit neu laden_

_$config->refresh();_

_// Konfigurationsvariable in die Datenbank eintragen_

_$config->add('foo', 'bar');_

_// Wert updaten_

_$config->update('bar', 'foo');_

==3. Fehlerbehandlung==

Hierzu wird in Zukunft die Klasse qEscape zur Verfügung stehen.
Ist es möglich den Fehler während der Laufzeit zu beheben, so wird qEscape dies auch tun.

Dies ist z. B. der Fall, wenn die Konfiguration aus irgendeinem Grund nicht gelesen werden kann. In diesem Fall wird auf eine Cache Version zugegriffen.

==4. Modul API von qGuestbook==

qGuestbook hat eine integrierte Modul API, die mit "Actions" arbeitet. An jeder Stelle im Code können so genannte "Actions" definiert werden. Teilweise sind standardmäßige schon einige implementiert. Actions rufen Methoden in Modulen auf, die wiederrum direkt in den Content von qGB eingreifen könen. Hier ein Beispiel:

  // die Methode hallo_welt(), hallo.php
  
  public function hallo_welt() {
   
    global $meine_variable;
  
    $meine_variable = "<h2>Hallo Welt!</h2>";
  
  }

  // index.php

  $meine_variable = "Hallo Welt";
  
  $module->action('hallo_welt');
  
  echo $meine_variable; // gibt "<h2>Hallo Welt!</h2>" aus

Eine genaue und ausführliche Dokumentation folgt.

==5. SQL Standarts==

Um sicherzustellen, dass die Querys auch mit allen Datenbanksystem funktionieren sind einige Standarts einzuhalten.

Dazu gehört z. B. "<>" statt "!=" zu verwenden. MSSQL hat hiermit seine Probleme.

==6. Coding Standarts==

Es sind die PEAR Coding Standarts einzuhalten.

http://pear.php.net/manual/de/standards.php

Die PEAR Codings Standards gelten für Quellcode der Bestandteil der offiziellen qGuestbook-Distribution ist. Module von Drittanbietern sollten diese Standarts ebenfalls einhalten, ansonsten werden sie nicht in unsere Datenbank aufgenommen.

Die Codings Standards werden meist kurz als CS bezeichnet. Ihr Ziel ist es, den Quellcode konsistent zu halten und somit es allen Beteiligten zu erleichtern den Quellcode zu lesen und zu betreuen. 

==7. Quelltext Dokumentation ==

Erstellt mit phpDocumentor, aber nicht immer auf dem neusten Stand. ;)

http://www.simlau.net/doc